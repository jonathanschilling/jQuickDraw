package de.labathome.jQuickDraw;

import java.nio.ByteBuffer;

public class Pattern {

	public static int BYTES = 8;

	public Pattern(byte[] pattern) {

		if (pattern != null && pattern.length != 8) {
			throw new RuntimeException("Pattern must be 8 bytes long");
		}

		this.p = pattern;
	}

	public static Pattern fromByteBuffer(ByteBuffer buf) {
		byte[] pattern = new byte[8];
		buf.get(pattern);
		return new Pattern(pattern);
	}

	public String toString() {
		return String.format("[0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x]",
				p[0], p[1], p[2], p[3],
				p[4], p[5], p[6], p[7]);
	}

	public byte[] p;

	/** valid indices: 1, 2, ..., 38 */
	public static Pattern[] MAC_PAINT_PATTERNS = {
		new Pattern(null                                                                                                       ), // index 0 is invalid
		new Pattern(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}), //  1 (solid black)
		new Pattern(new byte[] {(byte)0xDD, (byte)0xFF, (byte)0x77, (byte)0xFF, (byte)0xDD, (byte)0xFF, (byte)0x77, (byte)0xFF}), //  2
		new Pattern(new byte[] {(byte)0xDD, (byte)0x77, (byte)0xDD, (byte)0x77, (byte)0xDD, (byte)0x77, (byte)0xDD, (byte)0x77}), //  3
		new Pattern(new byte[] {(byte)0x55, (byte)0xAA, (byte)0x55, (byte)0xAA, (byte)0x55, (byte)0xAA, (byte)0x55, (byte)0xAA}), //  4
		new Pattern(new byte[] {(byte)0x55, (byte)0xFF, (byte)0x55, (byte)0xFF, (byte)0x55, (byte)0xFF, (byte)0x55, (byte)0xFF}), //  5
		new Pattern(new byte[] {(byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA}), //  6
		new Pattern(new byte[] {(byte)0xEE, (byte)0xDD, (byte)0xBB, (byte)0x77, (byte)0xEE, (byte)0xDD, (byte)0xBB, (byte)0x77}), //  7
		new Pattern(new byte[] {(byte)0x88, (byte)0x88, (byte)0x88, (byte)0x88, (byte)0x88, (byte)0x88, (byte)0x88, (byte)0x88}), //  8
		new Pattern(new byte[] {(byte)0xB1, (byte)0x30, (byte)0x03, (byte)0x1B, (byte)0xD8, (byte)0xC0, (byte)0x0C, (byte)0x8D}), //  9
		new Pattern(new byte[] {(byte)0x80, (byte)0x10, (byte)0x02, (byte)0x20, (byte)0x01, (byte)0x08, (byte)0x40, (byte)0x04}), // 10
		new Pattern(new byte[] {(byte)0xFF, (byte)0x88, (byte)0x88, (byte)0x88, (byte)0xFF, (byte)0x88, (byte)0x88, (byte)0x88}), // 11
		new Pattern(new byte[] {(byte)0xFF, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0xFF, (byte)0x08, (byte)0x08, (byte)0x08}), // 12
		new Pattern(new byte[] {(byte)0x80, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}), // 13
		new Pattern(new byte[] {(byte)0x80, (byte)0x40, (byte)0x20, (byte)0x00, (byte)0x02, (byte)0x04, (byte)0x08, (byte)0x00}), // 14
		new Pattern(new byte[] {(byte)0x82, (byte)0x44, (byte)0x39, (byte)0x44, (byte)0x82, (byte)0x01, (byte)0x01, (byte)0x01}), // 15
		new Pattern(new byte[] {(byte)0xF8, (byte)0x74, (byte)0x22, (byte)0x47, (byte)0x8F, (byte)0x14, (byte)0x22, (byte)0x71}), // 16
		new Pattern(new byte[] {(byte)0x55, (byte)0xA0, (byte)0x40, (byte)0x40, (byte)0x55, (byte)0x0A, (byte)0x04, (byte)0x04}), // 17
		new Pattern(new byte[] {(byte)0x20, (byte)0x50, (byte)0x88, (byte)0x88, (byte)0x88, (byte)0x88, (byte)0x05, (byte)0x02}), // 18
		new Pattern(new byte[] {(byte)0xBF, (byte)0x00, (byte)0xBF, (byte)0xBF, (byte)0xB0, (byte)0xB0, (byte)0xB0, (byte)0xB0}), // 19
		new Pattern(new byte[] {(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}), // 20 (solid white)
		new Pattern(new byte[] {(byte)0x80, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x80, (byte)0x00, (byte)0x08, (byte)0x00}), // 21
		new Pattern(new byte[] {(byte)0x88, (byte)0x00, (byte)0x22, (byte)0x00, (byte)0x88, (byte)0x00, (byte)0x22, (byte)0x00}), // 22
		new Pattern(new byte[] {(byte)0x88, (byte)0x22, (byte)0x88, (byte)0x22, (byte)0x88, (byte)0x22, (byte)0x88, (byte)0x22}), // 23
		new Pattern(new byte[] {(byte)0xAA, (byte)0x00, (byte)0xAA, (byte)0x00, (byte)0xAA, (byte)0x00, (byte)0xAA, (byte)0x00}), // 24
		new Pattern(new byte[] {(byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x00}), // 25
		new Pattern(new byte[] {(byte)0x11, (byte)0x22, (byte)0x44, (byte)0x88, (byte)0x11, (byte)0x22, (byte)0x44, (byte)0x88}), // 26
		new Pattern(new byte[] {(byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00}), // 27
		new Pattern(new byte[] {(byte)0x01, (byte)0x02, (byte)0x04, (byte)0x08, (byte)0x10, (byte)0x20, (byte)0x40, (byte)0x80}), // 28
		new Pattern(new byte[] {(byte)0xAA, (byte)0x00, (byte)0x80, (byte)0x00, (byte)0x88, (byte)0x00, (byte)0x80, (byte)0x00}), // 29
		new Pattern(new byte[] {(byte)0xFF, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x80}), // 30
		new Pattern(new byte[] {(byte)0x08, (byte)0x1C, (byte)0x22, (byte)0xC1, (byte)0x80, (byte)0x01, (byte)0x02, (byte)0x04}), // 31
		new Pattern(new byte[] {(byte)0x88, (byte)0x14, (byte)0x22, (byte)0x41, (byte)0x88, (byte)0x00, (byte)0xAA, (byte)0x00}), // 32
		new Pattern(new byte[] {(byte)0x40, (byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x0A, (byte)0x00, (byte)0x00}), // 33
		new Pattern(new byte[] {(byte)0x03, (byte)0x84, (byte)0x48, (byte)0x30, (byte)0x0C, (byte)0x02, (byte)0x01, (byte)0x01}), // 34
		new Pattern(new byte[] {(byte)0x80, (byte)0x80, (byte)0x41, (byte)0x3E, (byte)0x08, (byte)0x08, (byte)0x14, (byte)0xE3}), // 35
		new Pattern(new byte[] {(byte)0x10, (byte)0x20, (byte)0x54, (byte)0xAA, (byte)0xFF, (byte)0x02, (byte)0x04, (byte)0x08}), // 36
		new Pattern(new byte[] {(byte)0x77, (byte)0x89, (byte)0x8F, (byte)0x8F, (byte)0x77, (byte)0x98, (byte)0xF8, (byte)0xF8}), // 37
		new Pattern(new byte[] {(byte)0x00, (byte)0x08, (byte)0x14, (byte)0x2A, (byte)0x55, (byte)0x2A, (byte)0x14, (byte)0x08})  // 38
	};
}
